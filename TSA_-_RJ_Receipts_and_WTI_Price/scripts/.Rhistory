df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
historico_receitas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
#Função que faz a substituição de '.' separando (bi)milhões e milhares e ',' por '.' como delimitador decimal.
repl = function(x)setNames(c("","."),c(".",","))[x]
historico_receitas_rj[,2] <- str_replace_all(as.character(historico_receitas_rj[,2]), "[.](?!\\d+$)|,", repl)
#Conversão da coluna de receitas de 'factor' para numeric.
historico_receitas_rj <- historico_receitas_rj %>% mutate(receita = as.numeric(receita))
rm(repl)
historico_receitas_rj <- historico_receitas_rj %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
historico_receitas_rj
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
setwd("../dados")
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
historico_receitas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
#Função que faz a substituição de '.' separando (bi)milhões e milhares e ',' por '.' como delimitador decimal.
repl = function(x)setNames(c("","."),c(".",","))[x]
historico_receitas_rj[,2] <- str_replace_all(as.character(historico_receitas_rj[,2]), "[.](?!\\d+$)|,", repl)
#Conversão da coluna de receitas de 'factor' para numeric.
historico_receitas_rj <- historico_receitas_rj %>% mutate(receita = as.numeric(receita))
rm(repl)
historico_receitas_rj <- historico_receitas_rj %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
historico_receitas_rj
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
View(historico_wti)
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
historico_wti <- historico_wti %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
head(historico_wti)
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
historico_wti <- historico_wti %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
head(historico_wti)
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
historico_wti <- historico_wti %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
historico_wti[1:10,]
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
pre_historico_wti[1:10,]
pre_historico_wti <- historico_wti[1:10,]
View(pre_historico_wti)
View(pre_historico_wti)
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
pre_historico_wti <- historico_wti[1:10,]
pre_historico_wti <- pre_historico_wti %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW"))
pre_historico_wti <- historico_wti[1:10,]
pre_historico_wti <- pre_historico_wti %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
pre_historico_wti
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW&collapse=monthly"))
View(historico_wti)
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW&collapse=monthly"))
pre_historico_wti <- historico_wti[1:10,]
pre_historico_wti <- pre_historico_wti %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
pre_historico_wti
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW&collapse=monthly"))
pre_historico_wti <- head(historico_wti)
pre_historico_wti <- pre_historico_wti %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
pre_historico_wti
# Crio as "ts" para cada série
# Os períodos para fins de composição das séries  são iguais.
ts_receitas <- ts(historico_receitas_rj, start = c(2001, 1), frequency = 12)
ts_wti <- ts(historico_wti, start = c(2001, 1), frequency = 12)
# Crio as "ts" para cada série
# Os períodos para fins de composição das séries  são iguais.
ts_receitas_rj <- ts(historico_receitas_rj, start = c(2001, 1), frequency = 12)
ts_wti <- ts(historico_wti, start = c(2001, 1), frequency = 12)
ts_receitas_rj
ts_receitas_rj
ts_wti
ts_wti
ts_receitas_rj
head(historico_receitas_rj)
setwd("../dados")
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
historico_receitas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
#Função que faz a substituição de '.' separando (bi)milhões e milhares e ',' por '.' como delimitador decimal.
repl = function(x)setNames(c("","."),c(".",","))[x]
historico_receitas_rj[,2] <- str_replace_all(as.character(historico_receitas_rj[,2]), "[.](?!\\d+$)|,", repl)
#Conversão da coluna de receitas de 'factor' para numeric.
historico_receitas_rj <- historico_receitas_rj %>% mutate(receita = as.numeric(receita))
rm(repl)
#historico_receitas_rj <- historico_receitas_rj %>%
#    kable("html") %>%
#    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
head(historico_receitas_rj)
historico_receitas_rj[1:10,]
historico_wti <- read.csv(url("https://www.quandl.com/api/v3/datasets/FRED/DCOILWTICO.csv?api_key=aMnGQskzHkeiZEeSM_zW&collapse=monthly"))
historico_wti[1:10,]
historico_receitas_rj[1:10,]
# Crio as "ts" para cada série
# Os períodos para fins de composição das séries  são iguais.
ts_receitas_rj <- ts(historico_receitas_rj, start = c(2001, 1), frequency = 12)
ts_wti <-         ts(historico_wti,         start = c(2001, 1), frequency = 12)
View(ts_receitas_rj)
ts_receitas_rj
View(ts_receitas_rj)
View(historico_receitas_rj)
View(historico_wti)
# Crio as "ts" para cada série
# Os períodos para fins de composição das séries  são iguais.
ts_receitas_rj <- ts(historico_receitas_rj, start = c(2001, 1), frequency = 12)
ts_wti <-         ts(historico_wti,         start = c(2001, 1), frequency = 12)
#par(mfrow=c(2,1)) # Plotar 2 gráficos: 2 linhas, 1 coluna
plot.ts(ts_receitas_rj, col = "blue", main = "receitaeita do RJ (R$)",
ylab = "receitaeita em Milhões", xlab = "")
plot.ts(ts_wti, col = "brown", main = "Preço do BRENT (USD)",
ylab = "Dólares/barril", xlab = "Tempo")
# Crio as "ts" para cada série
# Os períodos para fins de composição das séries  são iguais.
ts_receitas_rj <- ts(historico_receitas_rj, start = c(2001, 1), frequency = 12)
ts_wti <-         ts(historico_wti,         start = c(1986, 1), frequency = 12)
#par(mfrow=c(2,1)) # Plotar 2 gráficos: 2 linhas, 1 coluna
plot.ts(ts_receitas_rj, col = "blue", main = "receitaeita do RJ (R$)",
ylab = "receitaeita em Milhões", xlab = "")
plot.ts(ts_wti, col = "brown", main = "Preço do BRENT (USD)",
ylab = "Dólares/barril", xlab = "Tempo")
library(readxl)
library(XLConnect)
library(tseries)
library(ggplot2)
library(foreign)
library(dplyr)
library(stringr)
library(kableExtra)
knitr::opts_chunk$set(echo = F, eval = F)
excel_sheets('dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx')
excel_sheets('../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx')
MontaSerieReceitas <- function(caminho, inicio, fim) {
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
#numSheets <- length(excel_sheets(caminho))
out <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in inicio:fim) {
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
out
}
MontaSerieReceitas <- function(caminho, inicio, fim) {
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
#numSheets <- length(excel_sheets(caminho))
out <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in inicio:fim) {
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
out
}
historico_receitas_rj <- MontaSerieReceitas(caminho = "SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx", inicio = 1, fim = 17)
library(readxl)
library(XLConnect)
library(tseries)
library(ggplot2)
library(foreign)
library(dplyr)
library(stringr)
library(kableExtra)
knitr::opts_chunk$set(echo = F, eval = F)
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
dadosReceitaRJ <- loadWorkbook("SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx",
create = T)
sheetNames <- getSheets(dadosReceitaRJ)
sheetNames
dadosReceitaRJ
MontaSerieReceitas <- function(caminho, inicio, fim) {
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
#dadosReceitaRJ <- loadWorkbook("SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx",
#create = T)
sheetNames <- getSheets(dadosReceitaRJ)
#numSheets <- length(excel_sheets(caminho))
out <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in inicio:fim) {
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
out
}
historico_receitas_rj <- MontaSerieReceitas(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx", inicio = 1, fim = 17)
View(historico_receitas_rj)
204/17
View(historico_receitas_rj)
str(historico_receitas_rj)
monta_serie_rj <- function(caminho, inicio, fim) {
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
out <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in inicio:fim) {
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
data <- c()
for (j in 1:12) data <- c(data, paste(j,'/', anoDaAba, sep = ''))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(data, receita)
out <- rbind(out, df)
}
out
}
receitas.rj <- monta_serie_rj(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx", inicio = 1, fim = 17)
View(receitas.rj)
View(receitas.rj)
rm(monta_serie_rj)
receitas.rj <- monta_serie_rj(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx", inicio = 1, fim = 17)
monta_serie_rj <- function(caminho, inicio, fim) {
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
out <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in inicio:fim) {
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
data <- c()
for (j in 1:12) data <- c(data, paste(j,'/', anoDaAba, sep = ''))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(data, receita)
out <- rbind(out, df)
}
out
}
receitas.rj <- monta_serie_rj(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx",
inicio = 1, fim = 17)
rm(monta_serie_rj)
View(receitas.rj)
#Função que faz a substituição de '.' separando (bi)milhões e milhares e ',' por '.' como delimitador decimal.
repl = function(x)setNames(c("","."),c(".",","))[x]
receitas.rj[,2] <- str_replace_all(as.character(receitas.rj[,2]), "[.](?!\\d+$)|,", repl)
#Conversão da coluna de receitas de 'factor' para numeric.
receitas.rj <- receitas.rj %>% mutate(receita = as.numeric(receita))
rm(repl)
View(receitas.rj)
monta_serie_rj <- function(caminho, inicio, fim) {
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
out <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in inicio:fim) {
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
data <- c()
for (j in 1:12) data <- c(data, paste(j,'/', anoDaAba, sep = ''))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(data, receita)
out <- rbind(out, df)
}
out
}
receitas.rj <- monta_serie_rj(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx",
inicio = 1, fim = 17)
rm(monta_serie_rj)
plot(ts(receitas.rj$receita))
#Função que faz a substituição de '.' separando (bi)milhões e milhares e ',' por '.' como delimitador decimal.
repl = function(x)setNames(c("","."),c(".",","))[x]
receitas.rj2 <- str_replace_all(as.character(receitas.rj[,2]), "[.](?!\\d+$)|,", repl)
receitas.rj$receita2 <- str_replace_all(as.character(receitas.rj$receita), "[.](?!\\d+$)|,", repl)
#Função que faz a substituição de '.' separando (bi)milhões e milhares e ',' por '.' como delimitador decimal.
#repl = function(x)setNames(c("","."),c(".",","))[x]
repl = function(x)setNames(c(".",""))[x]
View(repl)
monta_serie_rj <- function(caminho, inicio, fim) {
dadosReceitaRJ <- loadWorkbook(caminho, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
out <- data.frame(matrix(ncol = 0, nrow = 0))
for (i in inicio:fim) {
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
data <- c()
for (j in 1:12) data <- c(data, paste(j,'/', anoDaAba, sep = ''))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(data, receita)
out <- rbind(out, df)
}
out
}
receitas.rj$receita3 <- gsub('.','', receitas.rj$receita)
gsub('a','b', 'aaaccccccc')
r = receitas.rj[2,2]
r
str(r)
r = as.character(r)
r
receitas.rj$receita3 <- as.character(gsub('.','', receitas.rj$receita))
receitas.rj$receita3 <- gsub('.','', as.characte(receitas.rj$receita))
receitas.rj$receita3 <- gsub('.','', as.character(receitas.rj$receita))
receitas.rj$receita3 <- gsub('.','', as.character(receitas.rj$receita))
receitas.rj$receita3 <- as.character(receitas.rj$receita)
str(receitas.rj$receita3)
receitas.rj$receita3 <- gsub('.', '', receitas.rj$receita3)
receitas.rj$receita3 <- sub('.', '', receitas.rj$receita3)
r = as.numeric(receitas.rj[2,2])
r
receitas.rj$receita3 <- str_replace_all(receitas.rj$receita3, '.', '')
receitas.rj$receita3 <- str_replace_all(receitas.rj$receita, '.', '')
receitas.rj$receita3 <- str_replace_all(receitas.rj$receita, '', '.')
receitas.rj$receita3 <- str_replace_all(receitas.rj$receita, ".", "")
receitas.rj$receita3 <- str_replace_all(as.character(receitas.rj$receita), ".", "")
receitas.rj$receita3 <- as.character(receitas.rj$receita)
receitas.rj$receita3 <- str_replace_all(receitas.rj$receita3, ".", "")
receitas.rj$receita3 <- as.character(receitas.rj$receita)
receitas.rj$receita3
receitas.rj <- monta_serie_rj(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx",
inicio = 1, fim = 17)
repl = function(x)setNames(c(".",""))[x]
receitas.rj$receita2 <- str_replace_all(as.character(receitas.rj$receita), "[.](?!\\d+$)|,", repl)
repl = function(x)setNames(".", ",")[x]
receitas.rj$receita2 <- str_replace_all(as.character(receitas.rj$receita), "[.](?!\\d+$)|,", repl)
#Função que faz a substituição de '.' separando (bi)milhões e milhares e ',' por '.' como delimitador decimal.
#repl = function(x)setNames(c("","."),c(".",","))[x]
repl = function(x)setNames(c(".",".","."),c("","",""))[x]
receitas.rj$receita2 <- str_replace_all(as.character(receitas.rj$receita), "[.](?!\\d+$)|,", repl)
receitas.rj <- monta_serie_rj(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx",
inicio = 1, fim = 17)
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita3, ".", "")
receitas.rj$receita2 <- str_replace_all(as.character(receitas.rj$receita3), ".", "")
receitas.rj$receita2 <- str_replace_all(as.character(receitas.rj$receita), ".", "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, ".", "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, ".", "")
str_replace_all(receitas.rj$receita, ".", "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, "[.](?!\\d+$)|," , "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, "[.](?!\\d+$)|" , "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, "[.](?!\\d+$)|," , "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, "[.](?!\\d+$)" , "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, "[,](?!\\d+$)|," , "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, "/\./g" , "")
receitas.rj$receita2 <- str_replace_all(receitas.rj$receita, '\\.' , "")
receitas.rj$receita <- str_replace_all(receitas.rj$receita, '\\.' , "")
receitas.rj <- monta_serie_rj(caminho = "../dados/SERIE HISTORICA POR NATUREZA DE RECEITA 2001-2017.xlsx",
inicio = 1, fim = 17)
receitas.rj$receita <- str_replace_all(receitas.rj$receita, '\\.' , "")
receitas.rj[1:10,]
plot(ts(receitas.rj$receita, start = 2001, frequency = 12))
rm(monta_serie_rj)
