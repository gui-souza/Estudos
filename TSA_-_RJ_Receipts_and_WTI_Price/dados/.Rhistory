install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("rvest")
install.packages("rvest")
install.packages("kableExtra")
install.packages("tidyverse")
install.packages("kableExtra")
library(readxl)
library(XLConnect)
#library(xts)
library(tseries)
library(ggplot2)
#library(foreceitaast)
library(foreign)
library(dplyr)
library(stringr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
dir()
library(readxl)
library(XLConnect)
#library(xts)
library(tseries)
library(ggplot2)
#library(foreceitaast)
library(foreign)
library(dplyr)
library(stringr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets("filepath"))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas("serie_historica_ate_2017.xls", comCedae = T)
getwd()
dir()
setwd("/home/guilherme/Drive/Mestrado/dados")
library(readxl)
library(XLConnect)
#library(xts)
library(tseries)
library(ggplot2)
#library(foreceitaast)
library(foreign)
library(dplyr)
library(stringr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
# Sempre use o diretorio atual onde estão os arqivos em que você #está trabalhando. Por exemplo, se o seu wd (working direceitatory) está em C:/Users/Juliana/Documents/Mestrado, não preceitaisa dar todo este caminho para o comando read_excel. Basta navegar até a pasta onde está o arquivo .Rmd usando a aba de exploração de arquivos, embaixo de "Environment". Nela vc pode clicar em "More" (uma engrenagem azul e depois "set as working directory".
# Usa sempre uma variável fixa pra leitura de dados. A partir dele vc faz as modelagens necessárias. Por exemplo, usei a variável 'dados' como fixa. Com base nela vc vai derivando as suas análises. Ex.: receitaeitas_2010 <- dados %>% filter(2010)
receitaEITA_RJ_R <- read_excel("UFF MESTRADO/4? SEMESTRE 2018.1/Regress?o/receitaEITA_RJ_R.xlsx",
col_types = c("numeric"))
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets("filepath"))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas("serie_historica_ate_2017.xls", comCedae = T)
a <- loadWorkbook("serie_historica_ate_2017.xls")
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas("serie_historica_ate_2017.xls", comCedae = T)
p <- "serie_historica_ate_2017.xls"
a<-loadWorkbook(p)
p
View(a)
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas("serie_historica_ate_2017.xls", comCedae = T)
setwd("~/Drive/Mestrado/dados")
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas("serie_historica_ate_2017.xls", comCedae = T)
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
getwd()
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
df <- MontaSerieReceitas("serie_historica_ate_2017", comCedae = T)
df <- MontaSerieReceitas(filepath = "serie_historica_ate_2017", comCedae = T)
df <- MontaSerieReceitas(filepath = p, comCedae = T)
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
MontaSerieReceitas <- function(filepath = "", comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
MontaSerieReceitas <- function(nomeDoArquivo, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(file.path(nomeDoArquivo))
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(file.path(nomeDoArquivo)))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas(nomeDoArquivo = "serie_historica_ate_2017.xls", comCedae = T)
list.files()
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
df <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
View(df)
list.files()
serie_historica_ate_2017.xls
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath, create = TRUE)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
View(MontaSerieReceitas)
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath, create = T)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
df <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
getwd()
getwd()
MontaSerieReceitas <- function(filepath, comCedae = TRUE) {
dadosReceitaRJ <- loadWorkbook(filepath, create = TRUE)
sheetNames <- getSheets(dadosReceitaRJ)
numSheets <- length(excel_sheets(filepath))
out <- data.frame(matrix(ncol = 0, nrow = 0))
#currentYear <- yearStart
#currentYear <- 2009
for (i in 1:numSheets) {
#implementando verificação pelo nome da aba
#se tem 'com ...'
temCom <- grepl("com", sheetNames[i], ignore.case = T)
temSem <- grepl("sem", sheetNames[i], ignore.case = T)
#leio abas que tem "com cedae" ou "sem cedae" comparando com parâmetro @comCedae
#OU abas que NÃO tem nem "com cedae" e nem "sem cedae"
if(((temCom == TRUE & comCedae == TRUE)  | (temSem == TRUE & comCedae == FALSE)) |
(temCom == FALSE & temSem == FALSE)) {
#quero ver abas "com cedae"
receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = i) %>%
#receitaAnoRj <- readWorksheet(dadosReceitaRJ, sheet = 30) %>%
filter(.[,1] == "Total Geral" ) %>%
slice(1) %>%
select(-c(1, 2, 15:ncol(.)))
#populando saída
df <- data.frame(matrix(nrow = 12, ncol = 2))
#coletar o ano (XXXX) da label da aba
anoDaAba <- substr(sheetNames[i], 1, 4)
mesAno <- c()
#for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', currentYear, sep = ''))
for (j in 1:12) mesAno <- c(mesAno, paste(j,'/', anoDaAba, sep = ''))
#receita <- as.numeric(as.vector(receitaAnoRj[1,]))
names(receitaAnoRj) <- NULL
receita <- unlist(receitaAnoRj)
df <- cbind(mesAno, receita)
out <- rbind(out, df)
}
}
out
}
#chamada da função 'MontaSerieReceitas'.
recetas_rj <- MontaSerieReceitas(filepath = "serie_historica_ate_2017.xls", comCedae = T)
