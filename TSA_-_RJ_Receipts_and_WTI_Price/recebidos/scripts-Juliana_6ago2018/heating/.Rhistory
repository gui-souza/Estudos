as.character(monthly_revenue$Order.Month.Year)
monthly_revenue$Order.Month.Year <-
factor(monthly_revenue$Order.Month.Year,
levels = monthly_revenue$Order.Month.Year)
if(plot == TRUE) {
ggplot(monthly_revenue,
aes(x = Order.Month.Year,
y = Total.Revenue/1000,
group = 1)) +
geom_bar(stat = "identity") +
ylab("In thousands") +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Monthly total revenue")
}
else monthly_revenue
}
totalMRevenues(data)
subCatYComposCharts <- function(data) {
#Revenue composition by sub-category:
yearly_revenue_composition <- data %>%
group_by(Order.Year, Product.Sub.Category) %>%
summarise(Sub.Category.Total.Revenue = sum(Sales))
#Holds the quantity of years in data
years <- levels(as.factor(yearly_revenue_composition$Order.Year))
for(i in 1:length(years)) {
comp <- yearly_revenue_composition %>%
filter(Order.Year == years[i]) %>%
mutate(Part = Sub.Category.Total.Revenue / sum(Sub.Category.Total.Revenue)) %>%
ungroup() %>%
#select(Product.Sub.Category, Part) %>%
arrange(-Part)
comp$Product.Sub.Category <- factor(comp$Product.Sub.Category,
as.character(comp$Product.Sub.Category))
total_revenue <- sum(comp$Sub.Category.Total.Revenue)
print(ggplot(comp,
aes(x = Product.Sub.Category,
y = Part)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent) +
ggtitle(paste("Revenues composition by sub-category: ", years[i]),
subtitle = paste("Total Revenue: $ ",
format(total_revenue/1000000, digits = 3), "M",sep="")) +
ylab("") +
xlab("Sub-category"))
}
}
subCatYComposCharts(data)
prodYComposChart <- function(data) {
#Revenue composition by Product.Name:
yearly_revenue_composition <- data %>%
group_by(Order.Year, Product.Name, Product.Sub.Category) %>%
summarise(Product.Total.Revenue = sum(Sales))
#Holds the quantity of years in data
years <- levels(as.factor(yearly_revenue_composition$Order.Year))
subcategories <- levels(as.factor(yearly_revenue_composition$Product.Sub.Category))
#Looping each year
for(i in 1:length(years)) {
#Looping each subcategory
for(j in 1:length(subcategories)) {
comp <- yearly_revenue_composition %>%
filter(Order.Year == years[i])
#Total year revenue
total_revenue <- sum(comp$Product.Total.Revenue)
#Produtc revenue in relation to hoole year.
comp <- comp %>%
group_by(Product.Sub.Category) %>%
mutate(Product.Name = ifelse(nchar(Product.Name) > 20,
paste(substr(Product.Name, 1,20), "...", sep=""),
Product.Name))
comp <- comp %>%
#group_by(Product.Sub.Category) %>%
filter(Product.Sub.Category == subcategories[j])
#comp <- group_by(comp, comp$Product.Sub.Category)
#comp <- filter(comp, comp$Product.Sub.Category == subcategories[j])
sub_category_revenue <- sum(comp$Product.Total.Revenue)
comp <- comp %>%
mutate(Part = Product.Total.Revenue / sub_category_revenue) %>%
arrange(-Part) %>%
ungroup()
if(nrow(comp) > 40) {
n <- nrow(comp)
others <- comp %>%
slice(41:n) %>%
ungroup()
add <- others[1,] %>%
mutate(Order.Year = years[i],
Product.Name = paste(n - 41,"Others"),
Product.Sub.Category = subcategories[j],
Product.Total.Revenue = sum(others$Product.Total.Revenue),
Part = sum(others$Part))
comp <- rbind(slice(comp, 1:40), add)
}
#comp$Product.Name <- as.character(comp$Product.Name)
#comp$Product.Name <- factor(comp$Product.Name, levels = comp$Product.Name)
comp$Product.Name <- factor(comp$Product.Name,
as.character(comp$Product.Name))
gg <- ggplot(comp,
aes(x = Product.Name,
y = Part)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels = scales::percent) +
ggtitle(paste("Revenues Composition by product: ", years[i]),
subtitle = paste("Total Year Revenue: $",
format(total_revenue/1000000, digits = 3), "M",
"\nSub-category level: ", subcategories[j],
"\nSub-category revenue: $",
format(sub_category_revenue/1000, digits = 3), "K ",
"(", format((sub_category_revenue/total_revenue)*100, digits = 3), "%)",
sep="")) +
ylab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Product name")
print(gg)
}
}
}
prodYComposChart(data)
knitr::opts_chunk$set(echo = TRUE)
fmdlvnsvnsn
I(cdvfbxxdggnxc)
I("cdvfbxxdggnxc")
<p>dasvzfbdbbz</p>
I(<p>dasvzfbdbbz</p>)
I(<p>"dasvzfbdbbz"</p>)
I("<p>dasvzfbdbbz</p>")
I("dasvzfbdbbz")
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("ggplot2")
library("zoo")
library("forecast")
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("ggplot2")
library("zoo")
library("forecast")
sales <- read.csv("../Dados/Sample_-_Superstore_Sales_Excel.csv",sep=",",
header=T, stringsAsFactors=FALSE)
data <- sales
#Apply date format to column Order.Date:
data$Order.Date <- as.Date(data$Order.Date, format = "%d/%m/%Y")
data$Ship.Date <- as.Date(data$Ship.Date, format = "%d/%m/%Y")
#Conversion from factor to floating-point:
data$Sales <- as.numeric(gsub(",", ".", data$Sales))
#Create a column containing month-year date out of Order.Date:
#Cast Order.Month.Year as yearmon object:
data$Order.Month.Year <- as.yearmon(format(data$Order.Date))
#Create a column containing year of Order.Date:
data$Order.Year <- format(data$Order.Date, "%Y")
totalMRevenues <- function(data, plot = TRUE) {
#Summarise revenue monthly:
monthly_revenue <- data %>%
group_by(Order.Month.Year) %>%
summarise(Total.Revenue = sum(Sales))
#Keep original ordering of this variable for ggplot
monthly_revenue$Order.Month.Year <-
as.character(monthly_revenue$Order.Month.Year)
monthly_revenue$Order.Month.Year <-
factor(monthly_revenue$Order.Month.Year,
levels = monthly_revenue$Order.Month.Year)
if(plot == TRUE) {
ggplot(monthly_revenue,
aes(x = Order.Month.Year,
y = Total.Revenue/1000,
group = 1)) +
geom_bar(stat = "identity") +
ylab("In thousands") +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Monthly total revenue")
}
else monthly_revenue
}
totalMRevenues(data)
prodYComposChart <- function(data) {
#Revenue composition by Product.Name:
yearly_revenue_composition <- data %>%
group_by(Order.Year, Product.Name, Product.Sub.Category) %>%
summarise(Product.Total.Revenue = sum(Sales))
#Holds the quantity of years in data
years <- levels(as.factor(yearly_revenue_composition$Order.Year))
subcategories <- levels(as.factor(yearly_revenue_composition$Product.Sub.Category))
#Looping each year
for(i in 1:length(years)) {
#Looping each subcategory
for(j in 1:length(subcategories)) {
comp <- yearly_revenue_composition %>%
filter(Order.Year == years[i])
#Total year revenue
total_revenue <- sum(comp$Product.Total.Revenue)
#Produtc revenue in relation to hoole year.
comp <- comp %>%
group_by(Product.Sub.Category) %>%
mutate(Product.Name = ifelse(nchar(Product.Name) > 20,
paste(substr(Product.Name, 1,20), "...", sep=""),
Product.Name))
comp <- comp %>%
#group_by(Product.Sub.Category) %>%
filter(Product.Sub.Category == subcategories[j])
#comp <- group_by(comp, comp$Product.Sub.Category)
#comp <- filter(comp, comp$Product.Sub.Category == subcategories[j])
sub_category_revenue <- sum(comp$Product.Total.Revenue)
comp <- comp %>%
mutate(Part = Product.Total.Revenue / sub_category_revenue) %>%
arrange(-Part) %>%
ungroup()
if(nrow(comp) > 40) {
n <- nrow(comp)
others <- comp %>%
slice(41:n) %>%
ungroup()
add <- others[1,] %>%
mutate(Order.Year = years[i],
Product.Name = paste(n - 41,"Others"),
Product.Sub.Category = subcategories[j],
Product.Total.Revenue = sum(others$Product.Total.Revenue),
Part = sum(others$Part))
comp <- rbind(slice(comp, 1:40), add)
}
#comp$Product.Name <- as.character(comp$Product.Name)
#comp$Product.Name <- factor(comp$Product.Name, levels = comp$Product.Name)
comp$Product.Name <- factor(comp$Product.Name,
as.character(comp$Product.Name))
gg <- ggplot(comp,
aes(x = Product.Name,
y = Part)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels = scales::percent) +
ggtitle(paste("Revenues Composition by product: ", years[i]),
subtitle = paste("Total Year Revenue: $",
format(total_revenue/1000000, digits = 3), "M",
"\nSub-category level: ", subcategories[j],
"\nSub-category revenue: $",
format(sub_category_revenue/1000, digits = 3), "K ",
"(", format((sub_category_revenue/total_revenue)*100, digits = 3), "%)",
sep="")) +
ylab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Product name")
print(gg)
}
}
}
prodYComposChart(data)
dir()
setwd("")
data <- read.csv("churn.txt", header = TRUE)
load("~/Drive/AdmUff_2013_2/TCC/Ariel/leituras_e_referencias/livros/Data-Mining-and-Predictive-Analytics/Follow_Script.R")
dir()
library(scales)
library(tidyverse)
library(knitr)
library(DMwR)
require(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")
knitr::opts_knit$set(root.dir = '../dados')
getwd()
library(scales)
library(tidyverse)
library(knitr)
library(DMwR)
library(kableExtra)
library(pairsD3)
library(psych)
library(GPArotation)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")
knitr::opts_knit$set(root.dir = "../dados")
getwd()
citation("dplR")
citation("dplyr")
citation(principal)
citation("pairsD3")
citation("psych")
citation("DMwR")
citation("corrplot")
citation(rmd)
library(corrplot)
M <- cor(stdz.pdctors)
getwd()
setwd("~/Drive/AdmUff_2013_2/TCC/Ariel/relatorios")
library(corrplot)
M <- cor(stdz.pdctors)
cpc_pca <- cpc %>%
dplyr::select(`Concluintes Inscritos`:`CPC Faixa`) %>%
dplyr::mutate(`CPC Faixa` = as.numeric(`CPC Faixa`))
library(scales)
library(tidyverse)
library(knitr)
library(DMwR)
library(kableExtra)
library(pairsD3)
library(psych)
library(GPArotation)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")
knitr::opts_knit$set(root.dir = "../dados")
cpc <- readxl::read_excel("bd_cpc_2015.xlsx")
#cpc <- cpc %>%
#    filter(`Área de Enquadramento` == "ADMINISTRAÇÃO") %>%
#    filter(`Categoria Administrativa` == "Privada com fins lucrativos")
cpc_pca <- cpc %>%
dplyr::select(`Concluintes Inscritos`:`CPC Faixa`) %>%
dplyr::mutate(`CPC Faixa` = as.numeric(`CPC Faixa`))
colnames(cpc_pca) <- c("CI", "CP", "NBFG", "NBCE", "NBG", "NCE", "NBODP", "NPODP", "NBIIF",
"NPIIF", "NBOAF", "NPOAF", "CPNE", "PCPNE", "NBIDD", "NPIDD", "ND",
"NBM", "NPM", "NBD", "NPD", "NBRT", "NPRT", "CPCC", "CPCF")
#Prova de que a padronização do CPC não dá média = 0 e sd = 1.
stats_pdnz <- stats %>%
select(contains("Padronizada"))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
stats <- cpc %>%
dplyr::select(`Concluintes Inscritos`:`CPC Faixa`) %>%
dplyr::mutate(`CPC Faixa` = as.numeric(`CPC Faixa`))
#knn
get_summary <- function(df, na.handle, filename = "get_summary_output") {
if(na.handle == "knn") {
df <- knnImputation(as.data.frame(df))
}
else if(na.handle == "omit") {
df <- na.omit(df)
}
tmp <- do.call(data.frame,
list(mean = apply(df,2, mean),
sd = apply(df, 2, sd),
median = apply(df, 2, median),
mode = apply(df, 2, getmode),
min = apply(df, 2, min),
max = apply(df, 2, max),
n = apply(df,2, length)))
tmp <- round(tmp, 4)
out.name = paste("../tabelas/R.out/", filename, ".csv", sep = "")
write.csv(tmp, out.name)
tmp %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
get_summary(stats, na.handle = "knn")
cpc_pca <- cpc %>%
dplyr::select(`Concluintes Inscritos`:`CPC Faixa`) %>%
dplyr::mutate(`CPC Faixa` = as.numeric(`CPC Faixa`))
colnames(cpc_pca) <- c("CI", "CP", "NBFG", "NBCE", "NBG", "NCE", "NBODP", "NPODP", "NBIIF",
"NPIIF", "NBOAF", "NPOAF", "CPNE", "PCPNE", "NBIDD", "NPIDD", "ND",
"NBM", "NPM", "NBD", "NPD", "NBRT", "NPRT", "CPCC", "CPCF")
#Prova de que a padronização do CPC não dá média = 0 e sd = 1.
stats_pdnz <- stats %>%
select(contains("Padronizada"))
get_summary(stats_pdnz, na.handle = "knn", "tbl-vars-padronizadas-inep")
rm(getmode, get_summary, stats_pdnz)
library(corrplot)
M <- cor(stdz.pdctors)
#Padronização das variávesi pelo scale variáveis preditoras
stdz.pdctors <- subset(cpc_pca, select = -c(CPCC, CPCF))
stdz.pdctors <- knnImputation(as.data.frame(stdz.pdctors))
stdz.pdctors <- as.data.frame(scale(stdz.pdctors))
library(corrplot)
M <- cor(stdz.pdctors)
pdf("../graficos/latex-graph-matriz-correlacao.pdf", width = 7, height = 5)
corrplot(M, tl.col = "black", method = "square", type = "upper", order = "hclust",
col = colorRampPalette(c("white","gray","black"))(200))
dev.off()
rm(M)
M <- cor(stdz.pdctors)
pdf("../graficos/latex-graph-matriz-correlacao2.pdf", width = 7, height = 5)
corrplot(M, method = "square", tl.col = "black", order = "hclust", addrect = 4)
dev.off()
rm(M)
M <- cor(stdz.pdctors)
pdf("../graficos/latex-graph-matriz-correlacao2.pdf", width = 7, height = 5)
corrplot(M, method = "square", tl.col = "black", order = "hclust", addrect = 4,
col = colorRampPalette(c("white","gray","black"))(200))
dev.off()
rm(M)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library("tseries")
library("ggplot2")
library("forecast")
library("foreign")
library(tidyquant)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library("tseries")
library("ggplot2")
library("forecast")
library("foreign")
library(tidyquant)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library("tseries")
library("ggplot2")
library("forecast")
library("foreign")
#library(tidyquant)
library("urca")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tseries)
library(ggplot2)
library(forecast)
library(foreign)
library(urca)
library(tidyquant)
library(readxl)
library(tseries)
library(ggplot2)
library(forecast)
library(foreign)
library(urca)
#library(tidyquant)
RECEITA_RJ_R <- read_excel("UFF MESTRADO/4? SEMESTRE 2018.1/Regress?o/RECEITA_RJ_R.xlsx",
+     col_types = c("numeric"))
library(readxl)
library(tseries)
library(ggplot2)
library(forecast)
library(foreign)
library(urca)
#library(tidyquant)
print("Hello world")
getwd()
setwd("~/Drive/Mestrado/Juliana_6ago2018")
#Sempre use o diretorio atual onde estão os arqivos em que você #está trabalhando. Por exemplo, se o seu wd (working directory) está em C:/Users/Juliana/Documents/Mestrado, não precisa dar todo este caminho para o comando read_excel. Basta navegar até a pastaonde está o arquivo .Rmd usando a aba de exploração de arquivos, abaixo do Environment. Nela vc pode clicar em "More" (uma engrenagem azul e depois set as working directory. Assim vc só precisa usar o nome do arquivo como argumento da função, como fiz abaixo.)
dados <- read_excel("RECEITA_RJ_R.xlsx")
serie_receita<- ts(RECEITA_RJ_R, start = c(2001, 1), frequency = 12)
print("Hello")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tseries)
library(ggplot2)
library(forecast)
library(foreign)
library(urca)
#library(tidyquant)
RECEITA_RJ_R <- read_excel("UFF MESTRADO/4? SEMESTRE 2018.1/Regress?o/RECEITA_RJ_R.xlsx",
+     col_types = c("numeric"))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tseries)
library(ggplot2)
library(forecast)
library(foreign)
library(urca)
#library(tidyquant)
RECEITA_RJ_R <- read_excel("UFF MESTRADO/4? SEMESTRE 2018.1/Regress?o/RECEITA_RJ_R.xlsx",
+     col_types = c("numeric"))
# Sempre use o diretorio atual onde estão os arqivos em que você #está trabalhando. Por exemplo, se o seu wd (working directory) está em C:/Users/Juliana/Documents/Mestrado, não precisa dar todo este caminho para o comando read_excel. Basta navegar até a pastaonde está o arquivo .Rmd usando a aba de exploração de arquivos, abaixo do Environment. Nela vc pode clicar em "More" (uma engrenagem azul e depois set as working directory. Assim vc só precisa usar o nome do arquivo como argumento da função, como fiz abaixo.)
# Usa sempre uma variável fixa pra leitura de dados. A partir dele vc faz as modelagens necessárias. Por exemplo, usei a variável 'dados' como fixa. Com base nela vc vai derivando as suas análises. Ex.: receitas_2010 <- dados %>% filter(2010)
dados <- read_excel("RECEITA_RJ_R.xlsx")
ts_receitas <- ts
View(ts_receitas)
ts_receitas <- ts(dados, start = c(2001, 1), frequency = 12)
ts_receitas
plot(ts_receitas)
plot(ts_receitas, col='blue', main = 'Comportamento dados', xlab = 'Mês/ano')
summary(ts_receitas)
jarque.bera.test(ts_receitas)
library(pwt8)
install.packages("pwt8")
knitr::opts_chunk$set(echo = TRUE)
library(pwt8)
data("pwt8.0")
View(pwt8.0)
data("pwt8.0")
br <- subset(pwt8.0, country == "Brazil", select = c(rgdpna, avh, xr))
View(br)
data("pwt8.0")
br <- subset(pwt8.0, country == "Brazil", select = c(rgdpna, avh, xr))
br$prod <- br$rgdpna / br$avh
setwd("~/Drive/Mestrado/Juliana_6ago2018/heating")
data("pwt8.0")
br <- subset(pwt8.0, country == "Brazil", select = c(rgdpna, avh, xr))
br$prod <- br$rgdpna / br$avh
write.table(br, file = "dados.txt")
View(dados.txt)
dados <- read.table("dados.txt")
dados <- read.table("dados.txt")
dados <- ts(dados, start = 1950, frequency = 1)
dados <- read.table("dados.txt")
dados <- ts(dados, start = 1950, freq = 1)
plot(dados)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tseries)
library(ggplot2)
library(forecast)
library(foreign)
library(urca)
#library(tidyquant)
RECEITA_RJ_R <- read_excel("UFF MESTRADO/4? SEMESTRE 2018.1/Regress?o/RECEITA_RJ_R.xlsx",
+     col_types = c("numeric"))
# Sempre use o diretorio atual onde estão os arqivos em que você #está trabalhando. Por exemplo, se o seu wd (working directory) está em C:/Users/Juliana/Documents/Mestrado, não precisa dar todo este caminho para o comando read_excel. Basta navegar até a pastaonde está o arquivo .Rmd usando a aba de exploração de arquivos, abaixo do Environment. Nela vc pode clicar em "More" (uma engrenagem azul e depois set as working directory. Assim vc só precisa usar o nome do arquivo como argumento da função, como fiz abaixo.)
# Usa sempre uma variável fixa pra leitura de dados. A partir dele vc faz as modelagens necessárias. Por exemplo, usei a variável 'dados' como fixa. Com base nela vc vai derivando as suas análises. Ex.: receitas_2010 <- dados %>% filter(2010)
dados <- read_excel("RECEITA_RJ_R.xlsx")
print("\'E")
# Sempre use o diretorio atual onde estão os arqivos em que você #está trabalhando. Por exemplo, se o seu wd (working directory) está em C:/Users/Juliana/Documents/Mestrado, não precisa dar todo este caminho para o comando read_excel. Basta navegar até a pastaonde está o arquivo .Rmd usando a aba de exploração de arquivos, abaixo do Environment. Nela vc pode clicar em "More" (uma engrenagem azul e depois set as working directory. Assim vc só precisa usar o nome do arquivo como argumento da função, como fiz abaixo.)
# Usa sempre uma variável fixa pra leitura de dados. A partir dele vc faz as modelagens necessárias. Por exemplo, usei a variável 'dados' como fixa. Com base nela vc vai derivando as suas análises. Ex.: receitas_2010 <- dados %>% filter(2010)
dados <- read_excel("RECEITA_RJ_R.xlsx")
print("\´E")
# Sempre use o diretorio atual onde estão os arqivos em que você #está trabalhando. Por exemplo, se o seu wd (working directory) está em C:/Users/Juliana/Documents/Mestrado, não precisa dar todo este caminho para o comando read_excel. Basta navegar até a pastaonde está o arquivo .Rmd usando a aba de exploração de arquivos, abaixo do Environment. Nela vc pode clicar em "More" (uma engrenagem azul e depois set as working directory. Assim vc só precisa usar o nome do arquivo como argumento da função, como fiz abaixo.)
# Usa sempre uma variável fixa pra leitura de dados. A partir dele vc faz as modelagens necessárias. Por exemplo, usei a variável 'dados' como fixa. Com base nela vc vai derivando as suas análises. Ex.: receitas_2010 <- dados %>% filter(2010)
dados <- read_excel("RECEITA_RJ_R.xlsx")
print("é")
ts_receitas <- ts(dados, start = c(2001, 1), frequency = 12)
